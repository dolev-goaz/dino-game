;------------------------------------------
; File    : Project.asm
; AUTHOR  : Dolev Goaz
; DATE    :
; CLASS   : yud 4
; ASSUME  :
; VERSION : 1
; GAME    : THE RUNNING DINO
;------------------------------------------

		.486 ; makes dos think the processor is better, so it could run more commands
		IDEAL
		
		
		;----------------------------------------------------------
		; ShowPCX - Printing PCX at given location
		;----------------------------------------------------------
		; Input:
		; Pic starting X, Pic starting Y, FileName
		; Output:
		; 	Picture
		; Registers
		;	AX, BX, CX, DX, DS
		;----------------------------------------------------------
		MACRO SHOWPCX fName 
			pusha
			mov [StartPictX], 0d
			mov [StartPictY], 0d
			
			mov ax, [StartPictX]
			mov [Point_X], ax
			mov ax, [StartPictY]
			mov [Point_Y], ax

			mov dx, offset fName

			call ShowPCXFile
			popa
		ENDM SHOWPCX

		;----------------------------------------------------------
		; DeletePart- painting a rectangle/square in color
		;----------------------------------------------------------
		; Input:
		; Pic starting x, starting y, ending x, ending y, color
		; Output:
		; 	None
		; Registers
		;	CX, DX, AX
		;----------------------------------------------------------
		MACRO DeletePart startingX, startingY, endingX, endingY, color
		local PaintX
		local PaintY
		local EndPaint
			pusha
			mov cx, startingX
			mov dx, startingY
			mov al,color
			mov ah,0Ch ; draw dot mod
		PaintX:
			int 10h ; draw dot
			cmp cx,endingX ; max x
			je PaintY
			inc cx
			jmp PaintX
		PaintY:  
			cmp dx,endingY ; max y
			je EndPaint
			mov cx, startingX
			inc dx
			jmp PaintX
		EndPaint:
			popa

		ENDM DeletePart
		
		;----------------------------------------------------------
		; DrawPic Drawing sprite (bitmap)
		;----------------------------------------------------------
		; Input:
		; 	AX = picX, BX = picY, DH = PIC_HEIGHT, DL = PIC_WIDTH
		;   SI = address of pic 
		; Output:
		; 	The sprite
		; Registers
		;	AL, BX, CL, DX, DI
		;----------------------------------------------------------
		MACRO DrawPic Picture, PicHeight, PicWidth, startingX, startingY
			local cycle
				pusha
				mov dh, PicHeight
				mov dl, PicWidth

				mov ax, startingX ; starting X of pic
				mov bx, startingY ; starting Y of pic
				lea si, [Picture] ; mov si, offset Picture
		cycle:
				mov cl, [byte si] ; color of the current pixel.

				pusha ; don't affect registers
				Call Far PutPixel ; draw pixel
				popa  ; dont affect registers

				inc si ; move to the next byte
				inc ax ; inc x- draw next pixel
				dec dl ; dec dl- one pixel less to draw. width to draw lowered.
				jnz cycle      ; draw next pixel - next collum. (x)

				mov dl, PicWidth ; new line- width back to start
				sub ax, PicWidth ; ax= starting X of picture
				inc bx ; next line - increased y
				
				dec dh ; new line- height reduced by one.
				jnz cycle       ; draw next pixel- next line, starting x. (y)
				popa
		ENDM DrawPic

		;----------------------------------------------------
		;Print - PRINTING A STRING
		;----------------------------------------------------
		;Input:
		;            object
		;Output:
		;            printed STRING on screen(graphic mode)
		;Registers:
		;            AH, DX
		;----------------------------------------------------
		MACRO Print string
				push dx
				push ax
				mov dx, offset string
				mov ah, 09h ; PRINTING
				int 21h     ; STRING
				pop ax
				pop dx
		ENDM Print

		;----------------------------------------------------
		;ClearKeyboardBuffer- Clearing Keyboard Buffer by reading all keys from it.
		;----------------------------------------------------
		;Input:
		;            NONE
		;Output:
		;            NONE
		;Registers:
		;            AX
		;----------------------------------------------------
		MACRO ClearKeyboardBuffer
		local clear
		local cleared
				push ax
				clear: 
				mov ah, 1               
				int 16h 		; ?Any characters in buffer? 
				JZ  Cleared
				mov ah, 0
				int 16h
				jmp clear 
				Cleared: 
					pop ax
		ENDM ClearKeyboardBuffer
		
		;----------------------------------------------------
		;ClearKeyboardBuffer- Clearing Keyboard Buffer(using interrupt)
		;----------------------------------------------------
		;Input:
		;            NONE
		;Output:
		;            NONE
		;Registers:
		;            AX
		;----------------------------------------------------
		MACRO ClearKeyboardBuffer_INPUT_AFTER
				push ax
				mov ah,0ch
				mov al, 07h
				int 21h
				pop ax
		ENDM ClearKeyboardBuffer_INPUT_AFTER

		;----------------------------------------------------
		;PrintCharLocation - PRINTING A CHARACTER(WITH LOCATION)
		;----------------------------------------------------
		;Input:
		;            character, location
		;Output:
		;            printed character in location(graphic mode)
		;Registers:
		;            AX, DX
		;----------------------------------------------------

		MACRO PrintCharLocation char, x, y
			pusha
			SetCursorPosition x, y
			mov dl, char
			mov ah, 2
			int 21h
			popa
		ENDM PrintCharLocation

		;----------------------------------------------------
		;SetCursorPosition - setting cursor position
		;----------------------------------------------------
		;Input:
		;            x, y
		;Output:
		;            none
		;Registers:
		;            AX, DX
		;----------------------------------------------------

		MACRO SetCursorPosition x, y
		pusha
				mov ah, 02h
				mov dh, y
				mov dl, x
				xor bh, bh
				int 10h
		popa
		ENDM SetCursorPosition
		
		;--------------------------------------------------------------
		;JumpStartWhenEscapePressed - WAITING FOR ESCAPE PRESS. LEAVING TO MENU WHEN PRESSED
		;--------------------------------------------------------------
		;Input:
		;            none
		;Output:
		;            NONE
		;Registers:
		;            AL
		;--------------------------------------------------------------
		MACRO JumpStartWhenEscapePressed
			local waitingForInput
			waitingForInput:
				in al, 60h
				cmp al, EscapeKey ;checking if escape button was pressed
				je TheMenu
				jmp waitingForInput
		ENDM JumpStartWhenEscapePressed
		
		MODEL large

		STACK 100h

		
;----- 	Equates
		;---Keyboard Keys
		EnterKey equ 01Ch
		EscapeKey equ 1d
		UpArrow equ 48h
		DownArrow equ 50h

		KEY_RIGHT_DOWN equ 77 ; 01001101b
		KEY_LEFT_DOWN  equ 75  ; 01001011b
		KEY_UP_DOWN    equ 72    ; 01001000b
		KEY_DOWN_DOWN  equ 80; 01010000b
		
		KEY_RIGHT_UP equ 11001101b
		KEY_LEFT_UP   	equ 11001011b
		KEY_UP_UP     	equ 11001000b
		KEY_DOWN_UP equ 11010000b

		;---- Pic Properties
		PIC_STARTING_X equ 43d
		STANDING_PIC_WIDTH  equ 47d
		STANDING_PIC_HEIGHT equ 45d
		STANDING_PIC_STARTING_Y equ 152d
		
		HEAD_HEIGHT equ 15d
		
		STANDING_PIC_MAXY equ STANDING_PIC_STARTING_Y+STANDING_PIC_HEIGHT
		STANDING_PIC_MAXx equ PIC_STARTING_X+STANDING_PIC_WIDTH ; 87d
		
		;---- Pic Properties
		DUCKING_PIC_WIDTH  equ 66d
		DUCKING_PIC_HEIGHT equ 21d
		DUCKING_PIC_Y equ 174d
		
		DUCKING_PIC_MAXY equ 195d
		DUCKING_PIC_MAXx equ 98d
		
		;---- Pic Properties
		METEOR_WIDTH equ 44
		METEOR_HEIGHT equ 21
		
		METEOR_MAXy equ [obstacleY] + METEOR_HEIGHT
		METEOR_MAXx equ [obstacleX] + METEOR_WIDTH
		
		;---- Pic Properties
		Ground_Obstacle_Width equ 29
		Ground_Obstacle_Height equ 15
		
		Ground_Obstacle_MaxY equ [obstacleY] + Ground_Obstacle_Height
		Ground_Obstacle_MaxX equ [obstacleX] + Ground_Obstacle_Width
		;---- Colours
		Black equ 0
		White equ 0Fh

						 

		DATASEG
		
		buffer db white ; drawpic tries to draw a pixel before the bitmap. needs to set to white so there wont be a color changing pixel.
						 
		dinosaurNormal1	 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,11,11,11,11,11,09,11,11,11,11,11,11,11,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,13,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,13,13,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,13,11,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,13,13,12,11,12,13,13,11,11,11,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,13,12,12,11,12,13,13,11,11,13,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,12,12,11,12,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,00,00,00,12,13,11,11,11,12,11,11,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,00,00,00,00,00,00,00,00,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,13,12,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,07,01,01,01,00,00,00,11,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,08,08,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,08,08,01,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,01,01,01,00,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,01,01,01,00,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
				 
						 
		dinosaurNormal2	 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,11,11,11,11,11,09,11,11,11,11,11,11,11,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,13,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,13,13,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,13,11,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,13,13,12,11,12,13,13,11,11,11,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,13,12,12,11,12,13,13,11,11,13,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,12,12,11,12,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,00,00,00,12,13,11,11,11,12,11,11,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,00,00,00,00,00,00,00,00,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,13,12,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,07,01,01,01,00,00,00,11,11,11,11,11,11,11,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,08,01,01,01,00,15,00,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,08,00,00,00,00,15,00,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,00,11,11,11,11,11,11,11,01,01,00,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,00,00,00,00,00,00,00,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,00,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 
						 
				dinoJUMP db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,11,11,09,11,11,11,11,11,11,11,00,00,00,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11,11,11,11,11,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,13,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,12,12,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,13,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,11,11,13,12,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,13,13,13,11,13,13,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,13,11,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,13,13,12,11,12,13,13,11,11,11,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,13,12,12,11,12,13,13,11,11,13,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,12,12,11,12,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,00,00,00,12,13,11,11,11,12,11,11,12,13,11,11,11,13,12,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,00,00,00,00,00,00,00,00,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,13,12,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,13,13,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00,00,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,00,00,00,00,00,00,00,00,00,00,00,00,00,11,11,11,00,01,01,01,00,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,08,08,01,00,15,15,15,15,15,15,15,15,15,15,00,11,11,11,00,00,01,01,00,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,01,01,00,00,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,01,01,00,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,00,00,11,11,11,11,00,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,00,00,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,00,11,11,11,11,00,00,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,00,00,15,15,15,15,15,15,15
						 db 15,15,15,15,15,00,11,11,11,11,00,01,01,01,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,00,00,00,00,15,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15



		dinosaurDuck1 	 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,11,11,09,11,11,11,11,11,11,11,00,00,00,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,13,13,12,11,12,13,13,11,11,11,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,13,12,12,11,12,13,13,11,11,13,13,13,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,12,12,11,12,12,13,11,11,11,13,12,11,11,11,11,11,11,11,13,13,13,11,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,00,00,00,12,13,11,11,11,12,11,11,12,13,11,11,11,13,12,11,11,11,11,11,11,11,13,13,13,11,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,00,00,00,00,00,00,00,00,00,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,11,11,11,11,11,13,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,13,13,11,11,12,13,12,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,13,13,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,13,13,13,11,11,11,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,12,11,11,11,11,11,12,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,07,01,01,01,00,00,00,11,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,08,08,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,08,08,01,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,01,01,01,00,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,01,01,01,00,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
				 
						 
		
						 
		dinosaurDuck2 	 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,11,11,09,11,11,11,11,11,11,11,00,00,00,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,13,13,12,11,12,13,13,11,11,11,13,13,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,01,01,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,13,12,12,11,12,13,13,11,11,13,13,13,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,15,00,00,11,11,11,12,12,11,12,12,13,11,11,11,13,12,11,11,11,11,11,11,11,13,13,13,11,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,15,15,15,15,15,15,15,15,00,00,00,12,13,11,11,11,12,11,11,12,13,11,11,11,13,12,11,11,11,11,11,11,11,13,13,13,11,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,00,00,00,00,00,00,00,00,00,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,11,11,11,11,11,13,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,13,13,11,11,12,13,12,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,13,13,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,13,13,13,11,11,11,11,11,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,12,11,11,11,11,11,12,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,00,00,00,00,00,00,00,00,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,00,13,13,13,11,11,11,11,11,11,11,00,11,11,11,11,11,11,11,11,11,11,00
						 db 15,15,00,00,00,00,00,00,00,00,00,00,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,01,01,00,00,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,11,11,11,11,00,00,11,11,11,11,11,11,11,00,00
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,08,01,01,01,01,00,00,11,11,11,11,11,11,01,01,01,01,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,08,01,01,01,01,15,00,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,08,08,00,00,00,15,15,00,11,11,11,11,11,11,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,00,11,11,11,11,11,11,11,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,00,00,00,00,00,00,00,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,11,11,11,11,11,11,11,00,15,15,15,15,15,15,15,15,15,00,01,01,01,01,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,00,00,00,00,00,00,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
			
				meteor   db 015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,004,015,015,004,004,004,004,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,015,015,015,015,015,015,015,015,015,004,015,015,015,015,004,004,004,015,004,015,041,004,041,042,004,004,004,042,042,041,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,015,015,015,015,015,015,015,004,004,067,004,004,004,004,004,042,044,044,041,041,041,041,004,004,004,004,004,042,068,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,015,015,015,015,004,004,004,004,067,042,004,040,040,042,040,044,044,044,091,004,004,091,004,068,091,068,068,044,041,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,043,044,044,044,044,044,044,044,042,042,042,040,042,044,044,044,044,091,044,004,091,004,004,068,091,044,044,091,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,029,030,026,026,026,026,026,042,042,042,041,040,041,041,041,041,044,044,068,068,004,068,068,044,044,091,091,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,028,000,000,019,016,000,000,000,040,040,040,040,044,044,091,004,044,004,068,041,041,068,044,091,091,091,091,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,028,000,000,000,000,000,016,216,216,016,040,040,042,044,004,004,044,044,068,091,041,068,044,044,091,041,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,000,000,000,000,000,026,026,000,016,216,216,000,042,044,044,004,044,044,068,068,091,041,068,091,091,041,041,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,000,000,000,007,026,026,026,007,000,000,000,000,044,044,004,044,044,068,091,091,041,068,044,091,091,041,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,016,007,007,007,007,007,007,007,007,007,026,026,044,016,040,040,068,068,004,091,041,044,044,091,041,041,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,021,007,007,007,007,007,026,007,007,026,026,026,016,014,044,040,091,091,004,091,068,044,091,041,041,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,026,026,007,007,026,026,026,007,007,007,007,000,000,014,044,040,040,004,004,068,044,091,041,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,026,026,007,007,026,026,026,007,007,007,007,000,000,014,044,044,040,004,068,044,044,091,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,007,026,007,007,007,026,007,007,026,007,007,016,016,016,091,044,040,004,044,044,091,044,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,007,007,026,026,007,007,007,007,026,026,007,007,000,014,091,091,091,044,044,044,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,000,000,007,026,026,026,007,007,007,026,026,007,007,014,016,091,044,044,044,044,044,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,000,000,000,020,000,000,016,016,000,016,016,091,091,091,091,014,014,014,014,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,000,000,000,000,000,000,091,041,091,091,091,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,015,000,000,000,000,000,091,091,091,091,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 db 015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015,015
						 
		groundObstacle	 db 15,15,15,15,15,15,15,15,06,15,15,15,06,15,15,15,06,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,15,06,15,15,15,15,06,31,06,15,06,31,06,15,06,31,06,15,15,15,15,15,15,15,15,15,15,15
						 db 15,06,08,06,06,08,06,06,08,31,06,15,06,31,06,15,06,31,06,15,15,15,15,15,15,15,15,15,15
						 db 06,08,06,07,08,06,07,08,06,31,06,15,06,31,06,15,06,31,06,15,15,15,15,15,15,15,15,15,15
						 db 06,08,06,07,08,06,07,08,06,31,06,15,06,31,06,15,06,31,06,15,15,15,15,15,15,15,15,15,15
						 db 06,08,06,07,08,06,07,08,06,31,06,15,06,31,06,15,06,31,06,15,15,15,15,15,15,15,15,15,15
						 db 06,08,06,07,08,06,07,08,31,07,06,06,31,07,06,06,31,07,06,15,15,15,15,15,15,15,15,15,15
						 db 06,08,06,07,08,06,07,08,31,07,06,06,31,07,06,06,31,07,06,15,15,15,15,15,15,15,15,15,15
						 db 06,07,08,07,07,08,07,31,07,07,06,31,07,06,06,31,07,07,06,15,15,15,15,15,15,15,15,15,15
						 db 06,07,08,06,07,08,07,31,07,08,06,31,07,06,06,31,07,06,15,15,15,15,15,15,15,15,15,15,15
						 db 06,07,08,06,07,07,08,31,07,07,08,31,07,06,06,31,07,06,15,15,15,15,15,15,15,15,15,15,15
						 db 06,07,07,08,06,07,31,07,07,07,31,07,07,08,31,07,07,06,15,15,15,15,15,15,15,15,15,15,15
						 db 15,06,07,07,31,31,07,07,31,31,07,07,31,31,07,07,06,15,15,15,15,15,15,15,15,15,15,15,15
						 db 15,06,31,31,31,31,31,31,31,31,31,31,07,07,07,06,15,15,15,15,15,15,15,15,15,15,15,15,15
                         db 15,15,06,06,06,06,06,06,06,06,06,06,06,06,06,15,15,15,15,15,15,15,15,15,15,15,15,15,15
						 
				bone 	 db 006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006
						 db 006,006,006,014,014,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,014,014,006,006,006
						 db 006,006,014,068,068,014,006,006,006,006,006,006,006,006,006,006,006,006,006,014,068,067,014,006,006
						 db 006,014,068,068,068,014,006,006,006,006,006,006,006,006,006,006,006,006,006,014,068,068,068,014,006
						 db 006,014,068,014,068,068,014,014,014,014,014,014,014,014,014,014,014,014,014,068,068,068,068,014,006
						 db 006,006,014,014,014,068,068,068,068,068,068,068,068,068,068,068,068,067,068,068,068,067,014,006,006
						 db 006,006,014,014,067,014,067,067,067,067,067,067,067,067,067,067,067,067,067,067,068,068,014,006,006
						 db 006,014,014,014,067,067,014,014,014,014,014,014,014,014,014,014,014,014,014,068,068,068,068,014,006
						 db 006,014,067,014,014,014,006,006,006,006,006,006,006,006,006,006,006,006,006,014,068,068,068,014,006
						 db 006,006,014,014,067,014,006,006,006,006,006,006,006,006,006,006,006,006,006,014,068,067,014,006,006
						 db 006,006,006,014,014,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,014,014,006,006,006
						 db 006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006,006
						 

						 
		;PauseScreen db 13,10
		;db 13,10,13,10,13,10,13,10,13,10,13,10,13,10,13,10
		;db '         PRESS ESCAPE TO EXIT.',13,10,13,10
		;db '        PRESS ENTER TO CONTINUE.$'
			
		; ---- FOR MENU
		decision db 1d
		y db 10d
		x db 13d
		oldy db 10d
		
		; ---- FOR DINO
		StandingPicStartingY dw 155
		DuckingPicStartingY dw 175
		
		duckStatus db 0
		obstacleWidth db ?
		obstacleHeight db ?
		obstacleY dw 200
		obstacleX dw 0
		IsMeteor db 0 ;0=ground, 1=meteor. bool
		counter dw 0

		; ----- FOR PCX
	
		IntroScreen		DB 'IntroScr.PCX',0
		HelpScreen 		DB 'HelpScr.PCX',0
		LossScreen		DB 'LoseScr.PCX',0
		MenuScreen		DB 'MenuScr.PCX',0
		PauseScreen		DB 'PauseScr.PCX',0
		
		FileHandle      DW ?
		
		FileSize        DW ?
		
		ImageSizeInFile DW ?
		
		ImageLength     DW ?
		ImageHeigth     DW ?
		
		PaletteOffset   DW ?
		
		Point_X         DW ?
		Point_Y         DW ?
		Color           DB ?
		
		StartPictX      DW ?
		StartPictY      DW ?
		
		ErrorReadingFile DB 'Can not open file$'
		
		SEGMENT ImageContainer para public  'DATA'  
			DB 46000 DUP(?)
		ENDS
		
		CODESEG

Start:
	cycles=30000
	mov ax, @data
	mov ds, ax
	mov ax, 0013h  ; Calling graphic mode
	int 10h        ; Calling graphic mode
	
	mov ax, 0A000h ;  Set ES to graphics screen segment
	mov es, ax
	Call Far Intro
	
TheMenu:
	mov [StandingPicStartingY], STANDING_PIC_STARTING_Y
	mov [obstacleX], 0 ; to reset last game played
	Call Far ClearScreen
	SHOWPCX MenuScreen
	Call Far PrintMark
	Call Far input



;----------Call FarING PROCEDURES----------;
GamePlayProc:
	Call Far GamePlay

HowToPlayProc:
	Call Far HowToPlay
;----ACCESS NEEDED----;
PrintMarkCall :
	Call Far PrintMark
;--------------------------------------------------------------------------------------
;----------------------------------------------------
;Input- getting input from the user
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            AL
;----------------------------------------------------
PROC InputProc

input:
	in al, 60h
	cmp al, DownArrow ; checking if down arrow was pressed
	je downPress
	cmp al, UpArrow ; checking if up arrow was pressed
	je upPress
	cmp al, EnterKey ; checking if Enter was pressed
	je enterPress
	jmp input
	
	downPress:
		mov al, [y];     push [y]
		mov [oldy], al;  pop [oldy]
		inc [decision]
		inc [y]
			; checking if choice is in range of 1-3(3 choices)
		cmp [decision], 4
		jb nextdecision
		mov [decision], 1 ; decision is out of range
		mov [y], 10
		jmp nextdecision
	
	upPress:
		mov al, [y];     push [y]
		mov [oldy], al;  pop [oldy]
		dec [decision]
		dec [y]
		; checking if choice is in range of 1-3(3 choices)
		cmp [decision], 0 
		ja nextdecision
		mov [decision], 3 ; decision is out of range
		mov [y], 12
		jmp nextdecision
		
	enterPress:
		cmp [decision], 1
		je GamePlayProc
		cmp [decision], 2
		je HowToPlayProc
		cmp [decision], 3
		je exit

	nextdecision:
		jmp PrintMarkCall
	; ret isn't required because the program isn't going to reach it
ENDP InputProc

;----------------------------------------------------
;GamePlay - the start of the game
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            DX, AH, AL
;----------------------------------------------------
PROC GamePlay
	mov ax, 0A000h ;  Set ES to graphics screen segment
	mov es, ax
	DeletePart 0, 0, 320, 200, white ; WHITE SCREEN
	mov [duckStatus], 0
	jmp actualGame
GamePauseProc:
	Call Far GamePause
	DeletePart 0, 0, 320, 200, white ; WHITE SCREEN

actualGame:
	Call Far DinoWalking
	cmp ah, EscapeKey
	je GamePauseProc
	cmp ah, UpArrow
	je JumpingProc
	cmp ah, DownArrow
	je DuckingProc
backFromActions:
	ClearKeyboardBuffer
	jmp actualGame
	
	; ret isn't required because the program isn't going to reach it
ENDP GamePlay

JumpingProc:
	Call Far Jumping
	jmp backFromActions
DuckingProc:
	Call Far Ducking
	jmp backFromActions
	
	
PROC Ducking
	mov [duckStatus], 1
	DeletePart PIC_STARTING_X, STANDING_PIC_STARTING_Y, STANDING_PIC_MAXx, STANDING_PIC_MAXY, white
	Call Far DuckingAnimation
	DeletePart PIC_STARTING_X+STANDING_PIC_WIDTH, DUCKING_PIC_Y, DUCKING_PIC_MAXx+10, DUCKING_PIC_MAXY, white ;delete duck head
	mov [duckStatus], 0
		ret
ENDP Ducking

;----------------------------------------------------
;Obstacles - Summon and move enemy objects
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            DX, AH, AL
;----------------------------------------------------
PROC Obstacles
	pusha
	cmp [obstacleX], 0
	ja MoveObstacle
	DeletePart [obstacleX], 50, PIC_STARTING_X, 200, white; deleting obstacles
	mov [obstacleX], 280

	mov al, 2
	Call Far RandNum
	cmp al, 1 ; ground obstacle
	je @ground
	cmp al, 0 ; air obstacle
	je @air

	@ground:
		mov [IsMeteor], 0
		mov [obstacleY], 195-Ground_Obstacle_Height
		DrawPic groundObstacle, Ground_Obstacle_Height, Ground_Obstacle_Width, [obstacleX], [obstacleY]
		jmp EndObstacleSummon
		
	@air:
		mov [IsMeteor], 1
		mov al, 3 ; - input for RandNum
		Call Far RandNum
		cmp al, 1
		je HighestObastacle
		cmp al, 2
		je MiddleObstacle
		cmp al, 3
		je LowestObstacle
	HighestObastacle:
		mov [obstacleY], 110
		DrawPic meteor, METEOR_HEIGHT, METEOR_WIDTH, [obstacleX], [obstacleY]
		jmp EndObstacleSummon
	MiddleObstacle:
		mov [obstacleY], 140
		DrawPic meteor, METEOR_HEIGHT, METEOR_WIDTH, [obstacleX], [obstacleY]
		jmp EndObstacleSummon
	LowestObstacle:
		mov [obstacleY], 170
		DrawPic meteor, METEOR_HEIGHT, METEOR_WIDTH, [obstacleX], [obstacleY]
	EndObstacleSummon:
		popa
		ret
		
		
	MoveObstacle:
		
		cmp [IsMeteor], 1
		je meteorMovement
		cmp [IsMeteor], 0
		je GroundMovement
		meteorMovement:
		;	DeletePart PIC_STARTING_X, STANDING_PIC_STARTING_Y, STANDING_PIC_MAXx, STANDING_PIC_MAXY, white
			
			;DeletePart [obstacleX], [obstacleY], ax, bx, white
			sub [obstacleX], 10
			DrawPic meteor, METEOR_HEIGHT, METEOR_WIDTH, [obstacleX], [obstacleY]
			jmp CheckIfHit
			popa
			ret
		GroundMovement:
;			DeletePart [obstacleX], [obstacleY], ax, bx, white
			sub [obstacleX], 10
			DrawPic groundObstacle, Ground_Obstacle_Height, Ground_Obstacle_Width, [obstacleX], [obstacleY]
			jmp CheckIfHit
	returnGround:		;returning to RET
			popa
			ret
			
CheckIfHit:
	cmp [duckStatus], 1
	je duckCheckHit
	; here=normal/jumping
	cmp [obstacleX], PIC_STARTING_X+STANDING_PIC_WIDTH
	jbe CheckXRange2
	jmp returnGround
	
CheckXRange2:
	cmp [IsMeteor], 0
	je GroundCheckX
	; AX= OBSTACLE ENDINGX
	mov ax, [obstacleX]
	add ax, 34 
	cmp ax, PIC_STARTING_X
	jae CheckYRangeTopRightPoint1
	jmp returnGround
	
GroundCheckX:
	mov ax, [obstacleX]
	add ax, 19
	cmp ax, PIC_STARTING_X
	jae CheckYRangeTopRightPoint1
	jmp returnGround
;NEED TO CHECK Y HIT(top right pixel)
CheckYRangeTopRightPoint1:
	mov ax, [StandingPicStartingY] ; ax= starting y of pic
	cmp [obstacleY], ax
	jae CheckYRangeTopRightPoint2
	jmp CheckYRangeBottomLeftPoint1
	
CheckYRangeTopRightPoint2:
	add ax, STANDING_PIC_HEIGHT ; ax= ending y of pic
	cmp [obstacleY], ax
	jbe LosingScreenProc
	jmp CheckYRangeBottomLeftPoint1
	
CheckYRangeBottomLeftPoint1:
	mov bx, [obstacleY]
	add bx, 20 ; bx= highest y of obstacle(works for both meteor and ground)
	mov ax, [StandingPicStartingY] ; ax = starting y of pic
	cmp bx, ax
	jae CheckYRangeBottomLeftPoint2
	jmp returnGround
	
CheckYRangeBottomLeftPoint2:
	add ax, STANDING_PIC_HEIGHT ; ax= ending y of pic
	cmp bx, ax ; cmp (ObstacleEndingY, EndingYOfPic)
	jbe LosingScreenProc
	jmp returnGround
	
	
;		PIC_STARTING_X equ 43d
;		DUCKING_PIC_WIDTH  equ 66d
;		DUCKING_PIC_HEIGHT equ 21d
;		DUCKING_PIC_Y equ 174d
;		
;		DUCKING_PIC_MAXY equ 195d
;		DUCKING_PIC_MAXx equ 98d

       duckCheckHit:
       	cmp [obstacleX], PIC_STARTING_X+DUCKING_PIC_WIDTH+1
       	je duckCheckHit2
       	jmp returnGround
       duckCheckHit2: ; x behind dino
       	cmp [IsMeteor], 0
       	je DuckGroundCheckX
       	; AX= OBSTACLE ENDINGX
       	mov ax, [obstacleX]
       	add ax, 34 
       	cmp ax, PIC_STARTING_X
       	jae DuckCheckYRangeTopRightPoint1
       	jmp returnGround
       
       DuckGroundCheckX:
       	; AX= OBSTACLE ENDINGX
       	mov ax, [obstacleX]
       	add ax, 19
       	cmp ax, PIC_STARTING_X
       	jae DuckCheckYRangeTopRightPoint1
       	jmp returnGround
       	
       DuckCheckYRangeTopRightPoint1:
       	cmp [obstacleY], DUCKING_PIC_Y
       	jae DuckCheckYRangeTopRightPoint2
       	jmp DuckCheckYRangeBottomLeftPoint1
       
       DuckCheckYRangeTopRightPoint2:
       	cmp [obstacleY], DUCKING_PIC_Y + DUCKING_PIC_HEIGHT
       	jbe LosingScreenProc
       	jmp DuckCheckYRangeBottomLeftPoint1
       	
       DuckCheckYRangeBottomLeftPoint1:
       	mov bx, [obstacleY]
       	add bx, 20 ; bx= highest y of obstacle(works for both meteor and ground)
       	cmp bx, DUCKING_PIC_Y
       	jae DuckCheckYRangeBottomLeftPoint2
       	jmp returnGround
       	
       DuckCheckYRangeBottomLeftPoint2:
       	cmp bx, DUCKING_PIC_Y+STANDING_PIC_HEIGHT ; cmp (ObstacleEndingY, EndingYOfPic)
       	jbe LosingScreenProc
       	jmp returnGround



ENDP Obstacles


LosingScreenProc:
	popa
	Call Far LosingScreen

	
PROC LosingScreen
	Call Far ClearScreen
	SHOWPCX LossScreen
inputLoss:
	in al, 60h
	cmp al, EscapeKey
	je TheMenu
	jmp inputLoss
ENDP LosingScreen
;----------------------------------------------------
;DuckingAnimation - Animation while duck
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            CX, DX, AL, BX, DI
;----------------------------------------------------
PROC DuckingAnimation
mov [counter], 0
	DrawPic dinosaurDuck1, DUCKING_PIC_HEIGHT, DUCKING_PIC_WIDTH, PIC_STARTING_X, DUCKING_PIC_Y
startDucking:
		delayDuck1:
		inc [counter]
		; DELAY - 0.02 SECONDS
		mov cx, 0
		mov dx, 09C40h
		;cx,dx = 4E20h=20,000
		mov ah, 86h
		int 15h ; delay 20,000/1,000,000 sec = 1/50 sec
		Call Far obstacles
		cmp [counter], 4
		je firstFrameDuck
		jmp delayDuck1

firstFrameDuck:	
	mov [counter], 0
	DrawPic dinosaurDuck2, DUCKING_PIC_HEIGHT, DUCKING_PIC_WIDTH, PIC_STARTING_X, DUCKING_PIC_Y
	
	in al, 60h
	cmp al, KEY_DOWN_DOWN
	jne endDuck

		delayDuck2:
		
		inc [counter]
		; DELAY - 0.02 SECONDS
		mov cx, 0
		mov dx, 09C40h
		;cx,dx = 4E20h=20,000
		mov ah, 86h
		int 15h ; delay 20,000/1,000,000 sec = 1/50 sec
		Call Far obstacles
		cmp [counter], 4
		je secondFrameDuck
		jmp delayDuck2
		
secondFrameDuck:
	mov [counter], 0
	DrawPic dinosaurDuck1, DUCKING_PIC_HEIGHT, DUCKING_PIC_WIDTH, PIC_STARTING_X, DUCKING_PIC_Y
	in al, 60h
	cmp al, KEY_DOWN_DOWN
	jne endDuck
	jmp startDucking
endDuck:
	ret

ENDP DuckingAnimation

;----------------------------------------------------
;DinoWalking- Walking animation of the dinosaur
;----------------------------------------------------
;Input:
;            AH
;Output:
;            AL
;Registers:
;            AX
;----------------------------------------------------
PROC DinoWalking
mov [counter], 0
DrawPic dinosaurNormal2, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, STANDING_PIC_STARTING_Y
startWalking:
	delayWalking1:
	inc [counter]
	; DELAY - 0.02 SECONDS
	mov cx, 0
	mov dx, 09C40h
	;cx,dx = 4E20h=20,000
	mov ah, 86h
	int 15h ; delay 20,000/1,000,000 sec = 1/50 sec
	Call Far obstacles
	
	mov ah, 1
	int 16h
	jnz endWalkCheck1
returnFromCheck1:
	
	cmp [counter], 4
	je firstFrame
	jmp delayWalking1
	
	
firstFrame:
	mov [counter], 0
	DrawPic dinosaurNormal1, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, STANDING_PIC_STARTING_Y

	delayWalking2:
	inc [counter]
	; DELAY - 0.02 SECONDS
	mov cx, 0
	mov dx, 09C40h
	;cx,dx = 4E20h=20,000
	mov ah, 86h
	int 15h ; delay 20,000/1,000,000 sec = 1/50 sec
	Call Far obstacles
	
	mov ah, 1
	int 16h
	jnz endWalkCheck2
returnFromCheck2:
	
	cmp [counter], 4
	je secondFrame
	jmp delayWalking2
	
secondFrame:
	mov [counter], 0
	DrawPic dinosaurNormal2, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, STANDING_PIC_STARTING_Y
	jmp startWalking
	
endWalkCheck2:
	cmp ah, DownArrow
	je endWalk
	cmp ah, UpArrow
	je endWalk
	cmp ah, EscapeKey
	je endWalk
	ClearKeyboardBuffer
	jmp returnFromCheck2
	
endWalkCheck1:
	cmp ah, DownArrow
	je endWalk
	cmp ah, UpArrow
	je endWalk
	cmp ah, EscapeKey
	je endWalk
	ClearKeyboardBuffer
	jmp returnFromCheck1
	
endWalk:
	ret
ENDP DinoWalking



PROC Jumping
		pusha
delayFIRST:
		inc [counter]
		cmp [counter], 15 ; i want the obstacles to move only once in 0.05 seconds
		je JumpObstacles1

		; DELAY - 0.001 SECONDS
		mov cx, 0
		mov dx, 03E8h
		;cx,dx = 03E8h = 1,000
		mov ah, 86h
		int 15h ; delay 1,000/1,000,000 sec = 1/1000 sec
		mov ah, 1
		int 16h
		cmp ah, EscapeKey
		je GamePauseProc
		dec [StandingPicStartingY]
		cmp [StandingPicStartingY], 50
		je delaySecond
		DrawPic dinoJUMP, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, [StandingPicStartingY]
		jmp delayFIRST
JumpObstacles1:
	Call Far Obstacles
	mov [counter], 0
	jmp delayFirst
delaySecond:
		inc [counter]
		cmp [counter], 15 ; i want the obstacles to move only once in 0.05 seconds
		je JumpObstacles2
		; DELAY - 0.001 SECONDS
		mov cx, 0
		mov dx, 03E8h
		;cx,dx = 03E8h = 1,000
		mov ah, 86h
		int 15h ; delay 1,000/1,000,000 sec = 1/1,000 sec
		
	incY:
		inc [StandingPicStartingY]
		cmp [StandingPicStartingY], STANDING_PIC_STARTING_Y
		je endjump
		DrawPic dinoJUMP, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, [StandingPicStartingY]
		jmp delaySecond
JumpObstacles2:
	Call Far Obstacles
	mov [counter], 0
	jmp delaySecond



;rushdown:
;	mov [counter], 0
;delayRush:
;	cmp [counter], 7000
;	je LowerDino
;	inc [counter]
;	jmp delayRush
;LowerDino:
;	mov [counter], 0
;	inc [StandingPicStartingY]
;	cmp [StandingPicStartingY], STANDING_PIC_STARTING_Y
;	je endjump
;	DrawPic dinosaurNormal1, STANDING_PIC_HEIGHT, STANDING_PIC_WIDTH, PIC_STARTING_X, [StandingPicStartingY]
;	jmp rushdown
	
	
endjump:
	popa
	ret	
ENDP Jumping
	
	
;----------------------------------------------------
;HowToPlay - instructions about how to play
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            DX, AX
;----------------------------------------------------
PROC HowToPlay
	pusha
	Call Far ClearScreen
	SHOWPCX HelpScreen
	popa
	JumpStartWhenEscapePressed ; checking when escape button was pressed, if it was leave the screen.
	; ret isn't required because the program isn't going to reach it
ENDP HowToPlay
                   
                   
                   
	               
;----------------------------------------------------
;GamePause - GamePause menu
;----------------------------------------------------
;Input:            
;            NONE  
;Output:           
;            NONE  
;Registers:        
;            AL, DX
;----------------------------------------------------
PROC GamePause
	Call Far ClearScreen
	SHOWPCX PauseScreen
inputPause:
	ClearKeyboardBuffer_INPUT_AFTER
	in al, 60h     
	cmp al, EscapeKey ; checking if escape button was pressed
	je TheMenu
	cmp al, EnterKey
	je endPause    
	jmp inputPause 
endPause: 
	mov ax, 0A000h ;  Set ES to graphics screen segment
	mov es, ax
	ret            
	               
ENDP GamePause	   
                   
;----------------------------------------------------
;PrintMark - Printing mark(menu)
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            AX, DX
;----------------------------------------------------
PROC PrintMark
	push ax
	push dx
	PrintCharLocation ' ', [x], [oldy] ; delete previous mark
	PrintCharLocation '-', [x], [y]
	ClearKeyboardBuffer_INPUT_AFTER
	pop dx
	pop ax
	ret
ENDP PrintMark

;----------------------------------------------------
;Intro - The intro of the game
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            AX, DX
;----------------------------------------------------
PROC Intro
		pusha
		SHOWPCX IntroScreen
		
	
inputIntro:
	in al, 060h
	cmp al, EnterKey ; checking if Enter was pressed
	je return
	jmp inputIntro
return:
	popa
	ret
ENDP Intro

;----------------------------------------------------
;ClearScreen - Clearing the screen.
;----------------------------------------------------
;Input:
;            NONE
;Output:
;            NONE
;Registers:
;            AX
;----------------------------------------------------
PROC ClearScreen
	pusha
	xor cx, cx
	xor dx, dx
	mov al,0 ; colour black
	mov ah,0Ch ; draw dot mod
ClearScreenX:
	int 10h ; draw dot
	cmp cx,319 ; max x
	je ClearScreenY
	inc cx
	jmp ClearScreenX
ClearScreenY:  
	cmp dx,199 ; max y
	je EndClearScreen
	xor cx, cx
	inc dx
	jmp ClearScreenX
EndClearScreen:
	popa
	SetCursorPosition 0,0
	ret

ENDP ClearScreen

;----------------------------------------------------
;RandNum- Generating a number
;----------------------------------------------------
;Input:
;            AX
;Output:
;            AX
;Registers:
;            AX
;----------------------------------------------------
PROC RandNum
	cmp al, 2
	je Rand2Numbers
	cmp al, 3
	je Rand3Numbers
	jmp EndRand
	
	
Rand2Numbers:
	xor ax, ax
	in al, 40h
	and al, 01b
	;if al=0, output=0
	;if al=1, output=1
	jmp EndRand
	
Rand3Numbers:
	xor ax, ax
	in al, 40h
	shr al, 6
	cmp al, 0
	je Rand3Numbers ;output only 1,2,3
	
EndRand:
	ret
ENDP RandNum


;----------------------------------------------------------
; PutPixel Drawing point (direct memory access)
;----------------------------------------------------------
; Input:
; 	AX = x, BX = y, CL = color 
; Output:
; 	The point
; Registers
;	AL, BX, CL, DX, DI
;----------------------------------------------------------
PROC PutPixel
; in order to get one line lower you to add 320 to the pointer everytime you go one line lower
; you add the x to get to the starting position of the line
		mov dx, bx ; bx = y = dx
		shl bx, 6  ; bx = bx^8 = y^8
		shl dx, 8  ; dx = dx^8 = y^6
		
		mov di, ax ; di = ax = x
		add di, bx ; di = y^6 + x
		add di, dx ; di = y^8 + y^6 + x
;		di = y*320+x = y*(2^8) + y*(2^6) + x = (y<<8) + (y<<6) + x
		mov al, cl ; cl = color
		stosb		; mov es:[di], al. inc di (draws the pixel)
		ret
ENDP PutPixel

; -------- FOR PCX
;-------------------------------------------
; ReadPCXFile - read PCX file into ImageContainer 
;-------------------------------------------
; Input:
; 	File name
; Output:
; 	File into ImageContainer
; Registers
;       AX, BX, CX, DX, DS
;-------------------------------------------
PROC ReadPCXFile Near
        pusha

;-----  Initialize variables
        mov     [FileHandle],0
        mov     [FileSize],0

;-----  Open file for reading
        mov     ah, 3Dh
        mov     al, 0
        int     21h   ; mov DX,offset FileName  
        jc      @@Err
        mov     [FileHandle],AX   ; save Handle(Handle=Name Of File)

;-----  Get the length of a file by setting a pointer to its end
        mov     ah, 42h
        mov     al ,2
        mov     bx, [FileHandle]
        xor     cx, cx
        xor     dx, dx
        int     21h ; dx:ax= pointer on end of file
        jc 		@@Err
        cmp     dx,0
        jne     @@Err  ;file size exceeds 64K

;-----  Save size of file
        mov     [FileSize], ax

;----- Return a pointer to the beginning of the file
        mov     ah, 42h
        mov     al, 0
        mov     bx, [FileHandle]
        xor     cx, cx
        xor 	dx, dx
        int 21h ; ds:ax= pointer on start of file
        jc  @@Err

;-----  Read file into ImageContainer
        mov     bx, [FileHandle]
        pusha     
        push    ds
        mov     ax,ImageContainer
        mov     ds, ax
        xor     dx, dx
        mov     cx, 46000
        mov     ah, 3Fh
        int     21H
        pop     ds
        popa
        jc      @@Err

;-----  Close the file
        mov     ah, 3Eh
        mov     bx,[FileHandle]
        int     21H
        jc      @@Err
        popa
        ret
		
;-----  Exit - error reading file
@@Err:  ; Set text mode
        mov     ax, 3
        int     10h
        
        mov     dx, offset ErrorReadingFile
        mov     ah, 09h
        int     21h
        jmp     Exit
ENDP ReadPCXFile

;-------------------------------------------
; ShowPCXFile - show PCX file 
;-------------------------------------------
; Input:
; 	File name
; Output:
; 	The file
; Registers
;	 AX, BX, CX, DX, DS
;-------------------------------------------
PROC ShowPCXFile Near	
        pusha

        call    ReadPCXFile
		
		mov	ax, ImageContainer
        mov     es, ax

;-----  Set ES:SI on the image
        mov     si, 128

;-----  Calculate the width and height of the image
        mov     ax, [es:42h]
        mov     [ImageLength], ax
        dec     [ImageLength]
		
        mov     ax, [es:0Ah]
        sub     ax, [es:6]
        inc     ax
        mov     [ImageHeigth], ax

;-----  Calculate the offset from the beginning of the palette file
        mov     ax, [FileSize]
        sub     ax, 768
        mov     [PaletteOffset], ax
        call    SetPalette
        mov     ax, [FileSize]
        ;sub     ax, 128+768
        mov     [ImageSizeInFile], ax
		
        xor     ch, ch          ; Clear high part of CX for string copies
        ;mov     [Point_x],0    ; Set start position
        ;mov     [Point_y],0
NextByte:
        mov     cl, [es:si]     ; Get next byte
		cmp     cl, 0C0h        ; Is it a length byte?
        jb      normal          ;  No, just copy it
        and     cl, 3Fh         ; Strip upper two bits from length byte
        inc     si              ; Advance to next byte - color byte

       	mov     al, [es:si]
		mov 	[Color], al
NextPixel:
        call 	PutPixelPCX
        cmp     cx, 1
		je 	CheckEndOfLine
	
        inc     [Point_X]

		loop 	NextPixel		
        jmp     CheckEndOfLine
Normal:
      	mov 	[Color], cl
        call 	PutPixelPCX

CheckEndOfLine:
        mov     ax, [Point_X]
        add     ax, [StartPictX]
        cmp     ax, [ImageLength]
;-----  [point_x] >= [StartPictX]+[WidthPict]
        jae     LineFeed
        inc     [Point_x]
        jmp     cont
LineFeed:
        push    [StartPictX]
        pop     [Point_x]
    ;    mov    [Point_X],0
        inc     [Point_y]
cont:
        inc     si
        cmp     si, [ImageSizeInFile]     ; End of file? (written 320x200 bytes)
        jb      nextbyte
        popa
        ret
ENDP ShowPCXFile

;-------------------------------------------
; PutPixelPCX - draw pixel 
;-------------------------------------------
; Input:
; 	x - Point_x, y - Point_y, Color - color
; Output:
; 	The pixel
; Registers
;	 AX, BH, CX, DX
;-------------------------------------------
PROC PutPixelPCX near
        pusha
        mov 	bh, 0h
        mov 	cx, [Point_x]
        mov 	dx, [Point_Y]
        mov 	al, [color]
        mov 	ah, 0ch
        int 	10h
        popa
        ret
ENDP PutPixelPCX		

;-------------------------------------------
; SetPalette - change palette from 0-255 to from 0-63 
;-------------------------------------------
; Input:
; 	PaletteOffset
; Output:
; 	New palette
; Registers
;	 AX, BX, CX, DX, SI, ES
;-------------------------------------------
PROC SetPalette near
		pusha
		mov cx, 256*3
		mov si, [PaletteOffset] 	
NextColor:
		shr [byte es:si], 2
		inc si
		loop NextColor

		mov dx,	[PaletteOffset]
		mov ax, 1012h
		mov bx, 00h
		mov cx, 256d  
		int 10h
		popa
		ret
ENDP SetPalette


Exit:
	Call Far ClearScreen ; clear
	mov al, 03h ; moving to text mode
	mov ah, 00h ; moving to text mode
	int 10h     ; moving to text mode
	; END OF PROGRAM (the usual ending)
	mov ax, 4C00h
	int 21h
END start
; end my life